#include <iostream>
#include <string>
#include <vector>

using namespace std;

struct Result {
    int length;
    int start1;
    int end1;
    int start2;
    int end2;
    
    Result() : length(0), start1(-1), end1(-1), start2(-1), end2(-1) {}
    Result(int len, int s1, int e1, int s2, int e2) 
        : length(len), start1(s1), end1(e1), start2(s2), end2(e2) {}
};

Result lcs(const string& s1, const string& s2) {
    int m = s1.length(), n = s2.length();
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
    Result largest;
    
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (s1[i - 1] == s2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
                if (dp[i][j] > largest.length) {
                    largest.length = dp[i][j];
                    largest.end1 = i - 1;
                    largest.start1 = i - largest.length;
                    largest.end2 = j - 1;
                    largest.start2 = j - largest.length;
                }
            } else {
                dp[i][j] = 0;
            }
        }
    }
    
    return largest;
}

int main() {
    string s1 = "A12B34C56D78E9F12345ABCCBA54321FEDCBAABC1234DEF5678ABBA8765FEDCBA123456XYZ789WUV012ST345QR678OP901KL234MN567IJ890GH123EF456CD789AB012BC345DE678FG901HI234JK567LM890NO123PQ456RS789TU012VW345XY678ZA901BC234DE567FG890HI123JK456LM789NO012PQ345RS678TU901VW234XY567ZA890BC123DE456FG789HI012JK345LM678NO901PQ234RS567TU890VW123XY456ZA789BC012DE345FG678HI901JK234LM567NO890PQ123RS456TU789VW012XY345ZA678BC901DE234FG567HI890JK123LM456NO789PQ012RS345TU678VW901XY234ZA567BC890DE123FG456HI789JK012LM345NO678PQ901RS234TU567VW890XY123ZA456BC789DE012FG345HI678JK901LM234NO567PQ890RS123TU456VW789XY012ZA345BC678DE901FG234HI567JK890LM123NO456PQ789RS012TU345VW678XY901ZA234BC567DE890FG123HI456JK789LM012NO345PQ678RS901TU234VW567XY890ZA123BC456DE789FG012HI345JK678LM901NO234PQ567RS890TU123VW456XY789ZA012BC345DE678FG901HI234JK567LM890NO123PQ456RS789TU012VW345XY678ZA901BC234DE567FG890HI123JK456LM789NO012PQ345RS678TU901VW234XY567ZA890BC123DE456FG789HI012JK345LM678NO901PQ234RS567TU890VW123XY456ZA789BC012DE345FG678HI901JK234LM567NO890PQ123RS456TU789VW012XY345ZA678BC901DE234FG567HI890JK123LM456NO789PQ012RS345TU678VW901XY234ZA567BC890DE123FG456HI789JK012LM345NO678PQ901RS234TU567VW890XY123ZA456BC789DE012FG345HI678JK901LM234NO567PQ890RS123TU456VW789XY012ZA345BC678DE901FG234HI567JK890LM123NO456PQ789RS012TU345VW678XY901ZA234BC567DE890FG123HI456JK789LM012NO345PQ678RS901TU234VW567XY890ZA123BC456DE789FG012HI345JK678LM901NO234PQ567RS890TU123VW456XY789ZA012BC345DE678FG901HI234JK567LM890NO123PQ456RS789TU012VW345XY678ZA901BC234DE567FG890HI123JK456LM789NO012PQ345RS678TU901VW234XY567ZA890BC123DE456FG789HI012JK345LM678NO901PQ234RS567TU890VW123XY456ZA789BC012DE345FG678HI901JK234LM567NO890PQ123RS456TU789VW012XY345ZA678BC901DE234FG567HI890JK123LM456NO789PQ012RS345TU678VW901XY234ZA567BC890DE123FG456HI789JK012LM345NO678PQ901RS234TU567VW890XY123ZA456BC789DE012FG345HI678JK901LM234NO567PQ890RS123TU456VW789XY012ZA345BC678DE901FG234HI567JK890LM123NO456PQ789RS012TU345VW678XY901ZA234BC567DE890FG123HI456JK789LM012NO345PQ678RS901TU234VW567XY890ZA123BC456DE789FG012HI345JK678LM901NO234PQ567RS890TU123VW456XY789ZA012BC345DE678FG901HI234JK567LM890NO123PQ456RS789TU012VW345XY678ZA901BC234DE567FG890HI123JK456LM789NO012PQ345RS678TU901VW234XY567ZA890BC123DE456FG789HI012JK345LM678NO901PQ234RS567TU890VW123XY456ZA789BC012DE345FG678HI901JK234LM567NO890PQ123RS456TU789VW012XY345ZA678BC901DE234FG567HI890JK123LM456NO789PQ012RS345TU678VW901XY234ZA567BC890DE123FG456HI789JK012LM345NO678PQ901RS234TU567VW890XY123ZA456BC789DE012FG345HI678JK901LM234NO567PQ890RS123TU456VW789XY012ZA345BC678DE901FG234HI567JK890LM123NO456PQ789RS012TU345VW678XY901ZA234BC567DE890FG123HI456JK789LM012NO345PQ678RS901TU234VW567XY890ZA123BC456DE789FG012HI345JK678LM901NO234PQ567RS890TU123VW456XY789ZA012";
    string s
    
    cout << "String 1: " << s1 << endl;
    cout << "String 2: " << s2 << endl;
    cout << endl;

    Result largestCommonSubstring = lcs(s1, s2);
    cout << "Length of longest common substring: " << largestCommonSubstring.length << endl;
    cout << "In String 1: positions " << largestCommonSubstring.start1 << " to " << largestCommonSubstring.end1 
         << " (substring: '" << s1.substr(largestCommonSubstring.start1, largestCommonSubstring.length) << "')" << endl;
    cout << "In String 2: positions " << largestCommonSubstring.start2 << " to " << largestCommonSubstring.end2 
         << " (substring: '" << s2.substr(largestCommonSubstring.start2, largestCommonSubstring.length) << "')" << endl;
}